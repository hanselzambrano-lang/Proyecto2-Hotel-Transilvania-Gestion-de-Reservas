#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para configurar autom√°ticamente la base de datos del Hotel Transilvania
"""
import mysql.connector
from mysql.connector import Error

def crear_base_datos():
    """Crear la base de datos y las tablas necesarias"""
    try:
        # Conectar a MySQL sin especificar base de datos
        print("üîÑ Conectando a MySQL...")
        conexion = mysql.connector.connect(
            host='localhost',
            user='root',
            password='123456'
        )
        
        cursor = conexion.cursor()
        
        # Crear base de datos
        print("üîÑ Creando base de datos 'hotel_reservas'...")
        cursor.execute("CREATE DATABASE IF NOT EXISTS hotel_reservas")
        cursor.execute("USE hotel_reservas")
        
        # Crear tabla clientes
        print("üîÑ Creando tabla 'clientes'...")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS clientes (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nombre VARCHAR(100) NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            telefono VARCHAR(20) NOT NULL,
            dni VARCHAR(20) UNIQUE NOT NULL,
            fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # Crear tabla habitaciones
        print("üîÑ Creando tabla 'habitaciones'...")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS habitaciones (
            id INT AUTO_INCREMENT PRIMARY KEY,
            tipo VARCHAR(50) NOT NULL,
            numero INT UNIQUE NOT NULL,
            precio_noche DECIMAL(10,2) NOT NULL,
            capacidad INT NOT NULL,
            descripcion TEXT,
            disponible BOOLEAN DEFAULT TRUE
        )
        """)
        
        # Crear tabla reservas
        print("üîÑ Creando tabla 'reservas'...")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reservas (
            id INT AUTO_INCREMENT PRIMARY KEY,
            cliente_id INT,
            habitacion_id INT,
            fecha_checkin DATE NOT NULL,
            fecha_checkout DATE NOT NULL,
            num_huespedes INT NOT NULL,
            precio_total DECIMAL(10,2) NOT NULL,
            estado VARCHAR(20) DEFAULT 'confirmada',
            fecha_reserva TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (cliente_id) REFERENCES clientes(id),
            FOREIGN KEY (habitacion_id) REFERENCES habitaciones(id)
        )
        """)
        
        # Insertar habitaciones de ejemplo
        print("üîÑ Insertando habitaciones de ejemplo...")
        habitaciones_data = [
            ('Est√°ndar', 101, 150.00, 2, 'Habitaci√≥n c√≥moda con vista al jard√≠n'),
            ('Est√°ndar', 102, 150.00, 2, 'Habitaci√≥n c√≥moda con vista al jard√≠n'),
            ('Deluxe', 201, 250.00, 3, 'Habitaci√≥n espaciosa con balc√≥n'),
            ('Deluxe', 202, 250.00, 3, 'Habitaci√≥n espaciosa con balc√≥n'),
            ('Suite', 301, 400.00, 4, 'Suite con sala de estar separada'),
            ('Suite Presidencial', 401, 800.00, 6, 'La mejor suite del hotel con jacuzzi')
        ]
        
        cursor.executemany("""
        INSERT IGNORE INTO habitaciones (tipo, numero, precio_noche, capacidad, descripcion)
        VALUES (%s, %s, %s, %s, %s)
        """, habitaciones_data)
        
        # Confirmar cambios
        conexion.commit()
        print("‚úÖ Base de datos configurada exitosamente!")
        print("‚úÖ Tablas creadas: clientes, habitaciones, reservas")
        print(f"‚úÖ Habitaciones insertadas: {cursor.rowcount} registros")
        
        # Mostrar un resumen
        cursor.execute("SELECT COUNT(*) FROM habitaciones")
        total_habitaciones = cursor.fetchone()[0]
        print(f"üìä Total de habitaciones disponibles: {total_habitaciones}")
        
        return True
        
    except Error as e:
        print(f"‚ùå Error al configurar la base de datos: {e}")
        return False
        
    finally:
        if conexion.is_connected():
            cursor.close()
            conexion.close()
            print("üîå Conexi√≥n cerrada")

def verificar_conexion():
    """Verificar que la aplicaci√≥n puede conectarse a la base de datos"""
    try:
        print("\nüîÑ Verificando conexi√≥n de la aplicaci√≥n...")
        conexion = mysql.connector.connect(
            host='localhost',
            user='root',
            password='123456',
            database='hotel_reservas'
        )
        
        cursor = conexion.cursor()
        cursor.execute("SELECT COUNT(*) FROM habitaciones")
        total = cursor.fetchone()[0]
        
        print(f"‚úÖ Conexi√≥n exitosa! Habitaciones disponibles: {total}")
        return True
        
    except Error as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
        
    finally:
        if conexion.is_connected():
            cursor.close()
            conexion.close()

if __name__ == "__main__":
    print("üè® Configurando Hotel Transilvania - Base de Datos")
    print("=" * 50)
    
    if crear_base_datos():
        if verificar_conexion():
            print("\nüéâ ¬°Configuraci√≥n completada exitosamente!")
            print("üìå Ahora puedes ejecutar tu aplicaci√≥n Flask con: python app.py")
        else:
            print("\n‚ö†Ô∏è  Base de datos creada pero hay problemas de conexi√≥n")
    else:
        print("\n‚ùå Fall√≥ la configuraci√≥n de la base de datos")